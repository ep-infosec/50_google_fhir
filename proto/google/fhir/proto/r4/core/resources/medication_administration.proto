//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

syntax = "proto3";

package google.fhir.r4.core;

import "google/protobuf/any.proto";
import "proto/google/fhir/proto/annotations.proto";
import "proto/google/fhir/proto/r4/core/codes.proto";
import "proto/google/fhir/proto/r4/core/datatypes.proto";

option java_multiple_files = true;
option java_package = "com.google.fhir.r4.core";
option (.google.fhir.proto.fhir_version) = R4;

// Auto-generated from StructureDefinition for MedicationAdministration.
// Administration of medication to a patient.
// See http://hl7.org/fhir/StructureDefinition/MedicationAdministration
message MedicationAdministration {
  option (.google.fhir.proto.structure_definition_kind) = KIND_RESOURCE;
  option (.google.fhir.proto.fhir_structure_definition_url) =
      "http://hl7.org/fhir/StructureDefinition/MedicationAdministration";
  option (.google.fhir.proto.search_parameter) = {
    name: "code"
    type: TOKEN
    expression: "AllergyIntolerance.code | AllergyIntolerance.reaction.substance | Condition.code | (DeviceRequest.code as CodeableConcept) | DiagnosticReport.code | FamilyMemberHistory.condition.code | List.code | Medication.code | (MedicationAdministration.medication as CodeableConcept) | (MedicationDispense.medication as CodeableConcept) | (MedicationRequest.medication as CodeableConcept) | (MedicationStatement.medication as CodeableConcept) | Observation.code | Procedure.code | ServiceRequest.code"
  };
  option (.google.fhir.proto.search_parameter) = {
    name: "context"
    type: REFERENCE
    expression: "MedicationAdministration.context"
  };
  option (.google.fhir.proto.search_parameter) = {
    name: "device"
    type: REFERENCE
    expression: "MedicationAdministration.device"
  };
  option (.google.fhir.proto.search_parameter) = {
    name: "effective-time"
    type: DATE
    expression: "MedicationAdministration.effective"
  };
  option (.google.fhir.proto.search_parameter) = {
    name: "identifier"
    type: TOKEN
    expression: "AllergyIntolerance.identifier | CarePlan.identifier | CareTeam.identifier | Composition.identifier | Condition.identifier | Consent.identifier | DetectedIssue.identifier | DeviceRequest.identifier | DiagnosticReport.identifier | DocumentManifest.masterIdentifier | DocumentManifest.identifier | DocumentReference.masterIdentifier | DocumentReference.identifier | Encounter.identifier | EpisodeOfCare.identifier | FamilyMemberHistory.identifier | Goal.identifier | ImagingStudy.identifier | Immunization.identifier | List.identifier | MedicationAdministration.identifier | MedicationDispense.identifier | MedicationRequest.identifier | MedicationStatement.identifier | NutritionOrder.identifier | Observation.identifier | Procedure.identifier | RiskAssessment.identifier | ServiceRequest.identifier | SupplyDelivery.identifier | SupplyRequest.identifier | VisionPrescription.identifier"
  };
  option (.google.fhir.proto.search_parameter) = {
    name: "medication"
    type: REFERENCE
    expression: "(MedicationAdministration.medication as Reference) | (MedicationDispense.medication as Reference) | (MedicationRequest.medication as Reference) | (MedicationStatement.medication as Reference)"
  };
  option (.google.fhir.proto.search_parameter) = {
    name: "patient"
    type: REFERENCE
    expression: "AllergyIntolerance.patient | CarePlan.subject.where(resolve() is Patient) | CareTeam.subject.where(resolve() is Patient) | ClinicalImpression.subject.where(resolve() is Patient) | Composition.subject.where(resolve() is Patient) | Condition.subject.where(resolve() is Patient) | Consent.patient | DetectedIssue.patient | DeviceRequest.subject.where(resolve() is Patient) | DeviceUseStatement.subject | DiagnosticReport.subject.where(resolve() is Patient) | DocumentManifest.subject.where(resolve() is Patient) | DocumentReference.subject.where(resolve() is Patient) | Encounter.subject.where(resolve() is Patient) | EpisodeOfCare.patient | FamilyMemberHistory.patient | Flag.subject.where(resolve() is Patient) | Goal.subject.where(resolve() is Patient) | ImagingStudy.subject.where(resolve() is Patient) | Immunization.patient | List.subject.where(resolve() is Patient) | MedicationAdministration.subject.where(resolve() is Patient) | MedicationDispense.subject.where(resolve() is Patient) | MedicationRequest.subject.where(resolve() is Patient) | MedicationStatement.subject.where(resolve() is Patient) | NutritionOrder.patient | Observation.subject.where(resolve() is Patient) | Procedure.subject.where(resolve() is Patient) | RiskAssessment.subject.where(resolve() is Patient) | ServiceRequest.subject.where(resolve() is Patient) | SupplyDelivery.patient | VisionPrescription.patient"
  };
  option (.google.fhir.proto.search_parameter) = {
    name: "performer"
    type: REFERENCE
    expression: "MedicationAdministration.performer.actor"
  };
  option (.google.fhir.proto.search_parameter) = {
    name: "reason-given"
    type: TOKEN
    expression: "MedicationAdministration.reasonCode"
  };
  option (.google.fhir.proto.search_parameter) = {
    name: "reason-not-given"
    type: TOKEN
    expression: "MedicationAdministration.statusReason"
  };
  option (.google.fhir.proto.search_parameter) = {
    name: "request"
    type: REFERENCE
    expression: "MedicationAdministration.request"
  };
  option (.google.fhir.proto.search_parameter) = {
    name: "status"
    type: TOKEN
    expression: "MedicationAdministration.status | MedicationDispense.status | MedicationRequest.status | MedicationStatement.status"
  };
  option (.google.fhir.proto.search_parameter) = {
    name: "subject"
    type: REFERENCE
    expression: "MedicationAdministration.subject"
  };

  // Logical id of this artifact
  Id id = 1;

  // Metadata about the resource
  Meta meta = 2;

  // A set of rules under which this content was created
  Uri implicit_rules = 3;

  // Language of the resource content
  Code language = 4;

  // Text summary of the resource, for human interpretation
  Narrative text = 5;

  // Contained, inline Resources
  repeated protobuf.Any contained = 6;

  // Field 7 reserved for strongly-typed ContainedResource for id:
  // MedicationAdministration.contained
  reserved 7;

  // Additional content defined by implementations
  repeated Extension extension = 8;

  // Extensions that cannot be ignored
  repeated Extension modifier_extension = 9;

  // External identifier
  repeated Identifier identifier = 10;

  // Instantiates protocol or definition
  repeated Uri instantiates = 11;

  // Part of referenced event
  repeated Reference part_of = 12 [
    (.google.fhir.proto.valid_reference_type) = "MedicationAdministration",
    (.google.fhir.proto.valid_reference_type) = "Procedure"
  ];

  // in-progress | not-done | on-hold | completed | entered-in-error | stopped |
  // unknown
  message StatusCode {
    option (.google.fhir.proto.structure_definition_kind) = KIND_PRIMITIVE_TYPE;
    option (.google.fhir.proto.fhir_valueset_url) =
        "http://hl7.org/fhir/ValueSet/medication-admin-status";
    option (.google.fhir.proto.fhir_profile_base) =
        "http://hl7.org/fhir/StructureDefinition/code";

    MedicationAdministrationStatusCode.Value value = 1;

    String id = 2;

    repeated Extension extension = 3;
  }
  StatusCode status = 13
      [(.google.fhir.proto.validation_requirement) = REQUIRED_BY_FHIR];

  // Reason administration not performed
  repeated CodeableConcept status_reason = 14;

  // Type of medication usage
  CodeableConcept category = 15;

  // What was administered
  message MedicationX {
    option (.google.fhir.proto.is_choice_type) = true;

    oneof choice {
      CodeableConcept codeable_concept = 1;
      Reference reference = 2
          [(.google.fhir.proto.valid_reference_type) = "Medication"];
    }
  }
  MedicationX medication = 16
      [(.google.fhir.proto.validation_requirement) = REQUIRED_BY_FHIR];

  // Who received medication
  Reference subject = 17 [
    (.google.fhir.proto.validation_requirement) = REQUIRED_BY_FHIR,
    (.google.fhir.proto.valid_reference_type) = "Patient",
    (.google.fhir.proto.valid_reference_type) = "Group"
  ];

  // Encounter or Episode of Care administered as part of
  Reference context = 18 [
    (.google.fhir.proto.valid_reference_type) = "Encounter",
    (.google.fhir.proto.valid_reference_type) = "EpisodeOfCare"
  ];

  // Additional information to support administration
  repeated Reference supporting_information = 19
      [(.google.fhir.proto.valid_reference_type) = "Resource"];

  // Start and end time of administration
  message EffectiveX {
    option (.google.fhir.proto.is_choice_type) = true;

    oneof choice {
      DateTime date_time = 1;
      Period period = 2;
    }
  }
  EffectiveX effective = 20
      [(.google.fhir.proto.validation_requirement) = REQUIRED_BY_FHIR];

  // Who performed the medication administration and what they did
  message Performer {
    // Unique id for inter-element referencing
    String id = 1;

    // Additional content defined by implementations
    repeated Extension extension = 2;

    // Extensions that cannot be ignored even if unrecognized
    repeated Extension modifier_extension = 3;

    // Type of performance
    CodeableConcept function = 4;

    // Who performed the medication administration
    Reference actor = 5 [
      (.google.fhir.proto.validation_requirement) = REQUIRED_BY_FHIR,
      (.google.fhir.proto.valid_reference_type) = "Practitioner",
      (.google.fhir.proto.valid_reference_type) = "PractitionerRole",
      (.google.fhir.proto.valid_reference_type) = "Patient",
      (.google.fhir.proto.valid_reference_type) = "RelatedPerson",
      (.google.fhir.proto.valid_reference_type) = "Device"
    ];
  }
  repeated Performer performer = 21;

  // Reason administration performed
  repeated CodeableConcept reason_code = 22;

  // Condition or observation that supports why the medication was administered
  repeated Reference reason_reference = 23 [
    (.google.fhir.proto.valid_reference_type) = "Condition",
    (.google.fhir.proto.valid_reference_type) = "Observation",
    (.google.fhir.proto.valid_reference_type) = "DiagnosticReport"
  ];

  // Request administration performed against
  Reference request = 24
      [(.google.fhir.proto.valid_reference_type) = "MedicationRequest"];

  // Device used to administer
  repeated Reference device = 25
      [(.google.fhir.proto.valid_reference_type) = "Device"];

  // Information about the administration
  repeated Annotation note = 26;

  // Details of how medication was taken
  message Dosage {
    option (.google.fhir.proto.fhir_path_message_constraint) =
        "dose.exists() or rate.exists()";

    // Unique id for inter-element referencing
    String id = 1;

    // Additional content defined by implementations
    repeated Extension extension = 2;

    // Extensions that cannot be ignored even if unrecognized
    repeated Extension modifier_extension = 3;

    // Free text dosage instructions e.g. SIG
    String text = 4;

    // Body site administered to
    CodeableConcept site = 5;

    // Path of substance into body
    CodeableConcept route = 6;

    // How drug was administered
    CodeableConcept method = 7;

    // Amount of medication per dose
    SimpleQuantity dose = 8;

    // Dose quantity per unit of time
    message RateX {
      option (.google.fhir.proto.is_choice_type) = true;

      oneof choice {
        Ratio ratio = 1;
        SimpleQuantity quantity = 2;
      }
    }
    RateX rate = 9;
  }
  Dosage dosage = 27;

  // A list of events of interest in the lifecycle
  repeated Reference event_history = 28
      [(.google.fhir.proto.valid_reference_type) = "Provenance"];
}
