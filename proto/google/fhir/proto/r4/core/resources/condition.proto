//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

syntax = "proto3";

package google.fhir.r4.core;

import "google/protobuf/any.proto";
import "proto/google/fhir/proto/annotations.proto";
import "proto/google/fhir/proto/r4/core/datatypes.proto";

option java_multiple_files = true;
option java_package = "com.google.fhir.r4.core";
option (.google.fhir.proto.fhir_version) = R4;

// Auto-generated from StructureDefinition for Condition.
// Detailed information about conditions, problems or diagnoses.
// See http://hl7.org/fhir/StructureDefinition/Condition
message Condition {
  option (.google.fhir.proto.structure_definition_kind) = KIND_RESOURCE;
  option (.google.fhir.proto.fhir_structure_definition_url) =
      "http://hl7.org/fhir/StructureDefinition/Condition";
  option (.google.fhir.proto.fhir_path_message_constraint) =
      "abatement.empty() or clinicalStatus.coding.where(system='http://terminology.hl7.org/CodeSystem/condition-clinical' and (code='resolved' or code='remission' or code='inactive')).exists()";
  option (.google.fhir.proto.fhir_path_message_constraint) =
      "verificationStatus.coding.where(system='http://terminology.hl7.org/CodeSystem/condition-ver-status' and code='entered-in-error').empty() or clinicalStatus.empty()";
  option (.google.fhir.proto.fhir_path_message_warning_constraint) =
      "clinicalStatus.exists() or verificationStatus.coding.where(system='http://terminology.hl7.org/CodeSystem/condition-ver-status' and code = 'entered-in-error').exists() or category.select($this='problem-list-item').empty()";
  option (.google.fhir.proto.search_parameter) = {
    name: "Example Search Parameter"
    type: REFERENCE
    expression: "Condition.subject"
  };
  option (.google.fhir.proto.search_parameter) = {
    name: "abatement-age"
    type: QUANTITY
    expression: "Condition.abatement.as(Age) | Condition.abatement.as(Range)"
  };
  option (.google.fhir.proto.search_parameter) = {
    name: "abatement-date"
    type: DATE
    expression: "Condition.abatement.as(dateTime) | Condition.abatement.as(Period)"
  };
  option (.google.fhir.proto.search_parameter) = {
    name: "abatement-string"
    type: STRING
    expression: "Condition.abatement.as(string)"
  };
  option (.google.fhir.proto.search_parameter) = {
    name: "asserter"
    type: REFERENCE
    expression: "Condition.asserter"
  };
  option (.google.fhir.proto.search_parameter) = {
    name: "body-site"
    type: TOKEN
    expression: "Condition.bodySite"
  };
  option (.google.fhir.proto.search_parameter) = {
    name: "category"
    type: TOKEN
    expression: "Condition.category"
  };
  option (.google.fhir.proto.search_parameter) = {
    name: "clinical-status"
    type: TOKEN
    expression: "Condition.clinicalStatus"
  };
  option (.google.fhir.proto.search_parameter) = {
    name: "code"
    type: TOKEN
    expression: "AllergyIntolerance.code | AllergyIntolerance.reaction.substance | Condition.code | (DeviceRequest.code as CodeableConcept) | DiagnosticReport.code | FamilyMemberHistory.condition.code | List.code | Medication.code | (MedicationAdministration.medication as CodeableConcept) | (MedicationDispense.medication as CodeableConcept) | (MedicationRequest.medication as CodeableConcept) | (MedicationStatement.medication as CodeableConcept) | Observation.code | Procedure.code | ServiceRequest.code"
  };
  option (.google.fhir.proto.search_parameter) = {
    name: "encounter"
    type: REFERENCE
    expression: "Condition.encounter"
  };
  option (.google.fhir.proto.search_parameter) = {
    name: "evidence"
    type: TOKEN
    expression: "Condition.evidence.code"
  };
  option (.google.fhir.proto.search_parameter) = {
    name: "evidence-detail"
    type: REFERENCE
    expression: "Condition.evidence.detail"
  };
  option (.google.fhir.proto.search_parameter) = {
    name: "identifier"
    type: TOKEN
    expression: "AllergyIntolerance.identifier | CarePlan.identifier | CareTeam.identifier | Composition.identifier | Condition.identifier | Consent.identifier | DetectedIssue.identifier | DeviceRequest.identifier | DiagnosticReport.identifier | DocumentManifest.masterIdentifier | DocumentManifest.identifier | DocumentReference.masterIdentifier | DocumentReference.identifier | Encounter.identifier | EpisodeOfCare.identifier | FamilyMemberHistory.identifier | Goal.identifier | ImagingStudy.identifier | Immunization.identifier | List.identifier | MedicationAdministration.identifier | MedicationDispense.identifier | MedicationRequest.identifier | MedicationStatement.identifier | NutritionOrder.identifier | Observation.identifier | Procedure.identifier | RiskAssessment.identifier | ServiceRequest.identifier | SupplyDelivery.identifier | SupplyRequest.identifier | VisionPrescription.identifier"
  };
  option (.google.fhir.proto.search_parameter) = {
    name: "onset-age"
    type: QUANTITY
    expression: "Condition.onset.as(Age) | Condition.onset.as(Range)"
  };
  option (.google.fhir.proto.search_parameter) = {
    name: "onset-date"
    type: DATE
    expression: "Condition.onset.as(dateTime) | Condition.onset.as(Period)"
  };
  option (.google.fhir.proto.search_parameter) = {
    name: "onset-info"
    type: STRING
    expression: "Condition.onset.as(string)"
  };
  option (.google.fhir.proto.search_parameter) = {
    name: "patient"
    type: REFERENCE
    expression: "AllergyIntolerance.patient | CarePlan.subject.where(resolve() is Patient) | CareTeam.subject.where(resolve() is Patient) | ClinicalImpression.subject.where(resolve() is Patient) | Composition.subject.where(resolve() is Patient) | Condition.subject.where(resolve() is Patient) | Consent.patient | DetectedIssue.patient | DeviceRequest.subject.where(resolve() is Patient) | DeviceUseStatement.subject | DiagnosticReport.subject.where(resolve() is Patient) | DocumentManifest.subject.where(resolve() is Patient) | DocumentReference.subject.where(resolve() is Patient) | Encounter.subject.where(resolve() is Patient) | EpisodeOfCare.patient | FamilyMemberHistory.patient | Flag.subject.where(resolve() is Patient) | Goal.subject.where(resolve() is Patient) | ImagingStudy.subject.where(resolve() is Patient) | Immunization.patient | List.subject.where(resolve() is Patient) | MedicationAdministration.subject.where(resolve() is Patient) | MedicationDispense.subject.where(resolve() is Patient) | MedicationRequest.subject.where(resolve() is Patient) | MedicationStatement.subject.where(resolve() is Patient) | NutritionOrder.patient | Observation.subject.where(resolve() is Patient) | Procedure.subject.where(resolve() is Patient) | RiskAssessment.subject.where(resolve() is Patient) | ServiceRequest.subject.where(resolve() is Patient) | SupplyDelivery.patient | VisionPrescription.patient"
  };
  option (.google.fhir.proto.search_parameter) = {
    name: "recorded-date"
    type: DATE
    expression: "Condition.recordedDate"
  };
  option (.google.fhir.proto.search_parameter) = {
    name: "severity"
    type: TOKEN
    expression: "Condition.severity"
  };
  option (.google.fhir.proto.search_parameter) = {
    name: "stage"
    type: TOKEN
    expression: "Condition.stage.summary"
  };
  option (.google.fhir.proto.search_parameter) = {
    name: "subject"
    type: REFERENCE
    expression: "Condition.subject"
  };
  option (.google.fhir.proto.search_parameter) = {
    name: "verification-status"
    type: TOKEN
    expression: "Condition.verificationStatus"
  };

  // Logical id of this artifact
  Id id = 1;

  // Metadata about the resource
  Meta meta = 2;

  // A set of rules under which this content was created
  Uri implicit_rules = 3;

  // Language of the resource content
  Code language = 4;

  // Text summary of the resource, for human interpretation
  Narrative text = 5;

  // Contained, inline Resources
  repeated protobuf.Any contained = 6;

  // Field 7 reserved for strongly-typed ContainedResource for id:
  // Condition.contained
  reserved 7;

  // Additional content defined by implementations
  repeated Extension extension = 8;

  // Extensions that cannot be ignored
  repeated Extension modifier_extension = 9;

  // External Ids for this condition
  repeated Identifier identifier = 10;

  // active | recurrence | relapse | inactive | remission | resolved
  CodeableConcept clinical_status = 11;

  // unconfirmed | provisional | differential | confirmed | refuted |
  // entered-in-error
  CodeableConcept verification_status = 12;

  // problem-list-item | encounter-diagnosis
  repeated CodeableConcept category = 13;

  // Subjective severity of condition
  CodeableConcept severity = 14;

  // Identification of the condition, problem or diagnosis
  CodeableConcept code = 15;

  // Anatomical location, if relevant
  repeated CodeableConcept body_site = 16;

  // Who has the condition?
  Reference subject = 17 [
    (.google.fhir.proto.validation_requirement) = REQUIRED_BY_FHIR,
    (.google.fhir.proto.valid_reference_type) = "Patient",
    (.google.fhir.proto.valid_reference_type) = "Group"
  ];

  // Encounter created as part of
  Reference encounter = 18
      [(.google.fhir.proto.valid_reference_type) = "Encounter"];

  // Estimated or actual date,  date-time, or age
  message OnsetX {
    option (.google.fhir.proto.is_choice_type) = true;

    oneof choice {
      DateTime date_time = 1;
      Age age = 2;
      Period period = 3;
      Range range = 4;
      String string_value = 5 [json_name = "string"];
    }
  }
  OnsetX onset = 19;

  // When in resolution/remission
  message AbatementX {
    option (.google.fhir.proto.is_choice_type) = true;

    oneof choice {
      DateTime date_time = 1;
      Age age = 2;
      Period period = 3;
      Range range = 4;
      String string_value = 5 [json_name = "string"];
    }
  }
  AbatementX abatement = 20;

  // Date record was first recorded
  DateTime recorded_date = 21;

  // Who recorded the condition
  Reference recorder = 22 [
    (.google.fhir.proto.valid_reference_type) = "Practitioner",
    (.google.fhir.proto.valid_reference_type) = "PractitionerRole",
    (.google.fhir.proto.valid_reference_type) = "Patient",
    (.google.fhir.proto.valid_reference_type) = "RelatedPerson"
  ];

  // Person who asserts this condition
  Reference asserter = 23 [
    (.google.fhir.proto.valid_reference_type) = "Practitioner",
    (.google.fhir.proto.valid_reference_type) = "PractitionerRole",
    (.google.fhir.proto.valid_reference_type) = "Patient",
    (.google.fhir.proto.valid_reference_type) = "RelatedPerson"
  ];

  // Stage/grade, usually assessed formally
  message Stage {
    option (.google.fhir.proto.fhir_path_message_constraint) =
        "summary.exists() or assessment.exists()";

    // Unique id for inter-element referencing
    String id = 1;

    // Additional content defined by implementations
    repeated Extension extension = 2;

    // Extensions that cannot be ignored even if unrecognized
    repeated Extension modifier_extension = 3;

    // Simple summary (disease specific)
    CodeableConcept summary = 4;

    // Formal record of assessment
    repeated Reference assessment = 5 [
      (.google.fhir.proto.valid_reference_type) = "ClinicalImpression",
      (.google.fhir.proto.valid_reference_type) = "DiagnosticReport",
      (.google.fhir.proto.valid_reference_type) = "Observation"
    ];

    // Kind of staging
    CodeableConcept type = 6;
  }
  repeated Stage stage = 24;

  // Supporting evidence
  message Evidence {
    option (.google.fhir.proto.fhir_path_message_constraint) =
        "code.exists() or detail.exists()";

    // Unique id for inter-element referencing
    String id = 1;

    // Additional content defined by implementations
    repeated Extension extension = 2;

    // Extensions that cannot be ignored even if unrecognized
    repeated Extension modifier_extension = 3;

    // Manifestation/symptom
    repeated CodeableConcept code = 4;

    // Supporting information found elsewhere
    repeated Reference detail = 5
        [(.google.fhir.proto.valid_reference_type) = "Resource"];
  }
  repeated Evidence evidence = 25;

  // Additional information about the Condition
  repeated Annotation note = 26;
}
